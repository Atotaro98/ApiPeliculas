{"version":3,"sources":["actions/index.js","components/Favorites/Favorites.js","components/Buscador/Buscador.js","logoHenry.png","components/NavBar/NavBar.js","components/Movie/Movie.js","App.js","serviceWorker.js","reducers/index.js","store/index.js","index.js"],"names":["ADD_MOVIE_FAVORITE","REMOVE_MOVIE_FAVORITE","GET_MOVIES","GET_MOVIES_DETAIL","ConnectedList","dispatch","useDispatch","movieFavorita","useSelector","state","moviesFavourites","className","map","movie","Title","Year","to","imdbID","src","Poster","onClick","type","payload","Buscador","useState","title","setTitle","movieName","moviesLoaded","handleSubmit","e","titulo","preventDefault","fetch","then","response","json","onSubmit","htmlFor","id","autoComplete","value","onChange","target","handleChange","NavBar","Logo","width","height","alt","exact","Movie","movieDetail","params","useParams","useEffect","movieId","console","log","Released","Runtime","Genre","Awards","Production","App","Fragment","path","component","Favorites","Boolean","window","location","hostname","match","initialState","rootReducer","action","concat","filter","Search","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.85f4de31.chunk.js","sourcesContent":["//TODO HECHO X MI\r\n//TODO HECHO X MI\r\n//TODO HECHO X MI\r\n\r\nexport const ADD_MOVIE_FAVORITE = \"ADD_MOVIE_FAVORITE\"\r\nexport const REMOVE_MOVIE_FAVORITE = \"REMOVE_MOVIE_FAVORITE\"\r\nexport const GET_MOVIES = \"GET_MOVIES\"\r\nexport const GET_MOVIES_DETAIL = \"GET_MOVIES_DETAIL\"\r\n\r\n\r\n\r\n\r\nexport function addMovieFavorite(payload) {\r\n    return { type: ADD_MOVIE_FAVORITE, payload };\r\n  }\r\n\r\n\r\n  export function removeMovieFavorite(payload) {\r\n    return { type: REMOVE_MOVIE_FAVORITE, payload };\r\n  }\r\n\r\n\r\n  \r\n  export function getMovies(titulo) {\r\n    return function(dispatch) {\r\n      return fetch(\"http://www.omdbapi.com/?apikey=20dac387&s=\" + titulo)\r\n        .then(response => response.json())\r\n        .then(json => {\r\n          dispatch({ type: GET_MOVIES, payload: json });\r\n        });\r\n    };\r\n  }\r\n\r\n  export function getMoviesDetail(id) {\r\n    return function(dispatch) {\r\n      return fetch(\"http://www.omdbapi.com/?apikey=20dac387&i=\" + id)\r\n        .then(response => response.json())\r\n        .then(json => {\r\n          dispatch({ type: GET_MOVIES_DETAIL, payload: json });\r\n        });\r\n    };\r\n  }","import React, { Component } from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from 'react-router-dom';\r\nimport './Favorites.css';\r\nimport { removeMovieFavorite} from '../../actions/index' //AGREGADO X MI\r\n\r\n\r\n\r\nexport default function ConnectedList() {\r\n\r\n    const dispatch = useDispatch()\r\n    const movieFavorita = useSelector(state => state.moviesFavourites)\r\n\r\n  \r\n  return(\r\n\r\n    \r\n            <div>\r\n              <div className=\"centrado\">\r\n              <h2 className=\"favoritas-titulo\">Tus Películas Favoritas</h2>\r\n              </div>\r\n              <ul>\r\n                { movieFavorita && movieFavorita.map(movie =>(\r\n              \r\n                  <div  className=\"peli\" key={movie.imdbID}>\r\n                    <h1>{movie.Title}</h1>\r\n\r\n                    <div className=\"imagen\">\r\n                      <figure>\r\n                            <span className=\"año\">{movie.Year}</span> \r\n                            <Link className=\"link\" to={`/movie/${movie.imdbID}`}>  <img className=\"poster\"  src={ movie.Poster === \"N/A\" ?'https://thumbs.dreamstime.com/b/no-image-available-icon-flat-vector-no-image-available-icon-flat-vector-illustration-132482953.jpg':  movie.Poster }></img> </Link> \r\n                          </figure> \r\n                         </div>\r\n                      <button className=\"remove-favorite\" onClick={() =>dispatch(removeMovieFavorite(movie)) }>Remover de Favoritas</button>\r\n                      \r\n                  </div>\r\n      \r\n                )) \r\n                }\r\n              </ul>\r\n            </div>\r\n         \r\n  );\r\n\r\n}\r\n\r\n\r\n\r\n\r\n//COMENTADO ESTA CON CLASES\r\n//COMENTADO ESTA CON CLASES\r\n//COMENTADO ESTA CON CLASES\r\n//COMENTADO ESTA CON CLASES\r\n\r\n\r\n\r\n// export class ConnectedList extends Component {\r\n\r\n//   render() {\r\n//       return (\r\n//       <div>\r\n//         <h2>Películas Favoritas</h2>\r\n//         <ul>\r\n//           { this.props.movies && this.props.movies.map(movie =>(\r\n//              //AGREGADO X MI EL KEY PARA QUE TENGAN UN KEY UNICO X EL ID\r\n//             <div  >\r\n//                 <Link to={`/movie/${movie.id}`}> \r\n//                   {movie.Title}     \r\n//                   </Link> \r\n//                 <button onClick={() => this.props.removeMovieFavorite(movie)}>X</button> {/*COPY PASTE DEL README*/}\r\n//             </div>\r\n\r\n//           )) \r\n//           }\r\n//         </ul>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n\r\n// function mapStateToProps(state) {\r\n//   return {\r\n//     movies: state.moviesFavourites\r\n//   };\r\n// }\r\n\r\n// function mapDispatchToProps(dispatch) {\r\n//   return {\r\n//     removeMovieFavorite: movie => dispatch(removeMovieFavorite(movie)),\r\n//   };\r\n// }\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ConnectedList);\r\n","import React, { Component, useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom';\r\nimport './Buscador.css';\r\nimport { addMovieFavorite, getMovies} from '../../actions/index' //AGREGADO X MI\r\n\r\n\r\n export default function Buscador () {\r\n    const [title, setTitle] = useState('')\r\n\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const movieName = useSelector(state => state.moviesLoaded)\r\n\r\n\r\n\r\n   function handleChange (e){\r\n     setTitle(e.target.value)\r\n    }\r\n\r\n  \r\n    function handleSubmit (e) {\r\n        e.preventDefault();\r\n        dispatch(getMovies(title))\r\n       }\r\n\r\n       \r\n   \r\n\r\n    return (\r\n            <div className=\"formulario\">\r\n              \r\n              <form className=\"form-container\" onSubmit={(e) => handleSubmit(e)}>\r\n                <div>\r\n                  <label className=\"label\" htmlFor=\"title\">Película: </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"title\"\r\n                    autoComplete=\"off\"\r\n                    value={title}\r\n                    onChange={(e) => handleChange(e)}\r\n                  />\r\n                  <button className=\"buscar\" type=\"submit\">BUSCAR</button>\r\n                </div>\r\n                \r\n              </form>\r\n              <section className=\"contenedor\"> \r\n               {  \r\n                movieName && movieName.map(movie =>(\r\n                \r\n                  <div className=\"peli\" key={movie.imdbID}>\r\n                      \r\n                       \r\n                       <h1>{movie.Title}</h1>   \r\n                        \r\n                        <div className=\"imagen\">\r\n                          \r\n                          <figure>\r\n                            <span className=\"año\">{movie.Year}</span> \r\n                            <Link className=\"link\" to={`/movie/${movie.imdbID}`}>  <img className=\"poster\"  src={ movie.Poster === \"N/A\" ?'https://thumbs.dreamstime.com/b/no-image-available-icon-flat-vector-no-image-available-icon-flat-vector-illustration-132482953.jpg':  movie.Poster }></img> </Link> \r\n                          </figure>\r\n                       </div>\r\n                        <button className=\"favorita\" onClick={ () => dispatch(addMovieFavorite({Title: movie.Title, id: movie.imdbID, Poster:movie.Poster, Year: movie.Year, }))}>Añadir a Favorita</button>\r\n                  </div>\r\n                    \r\n                 ))\r\n               } \r\n              </section>\r\n            </div>\r\n          );\r\n\r\n} ;\r\n\r\n//COMENTADO ESTA CON CLASES\r\n//COMENTADO ESTA CON CLASES\r\n//COMENTADO ESTA CON CLASES\r\n//COMENTADO ESTA CON CLASES\r\n//COMENTADO ESTA CON CLASES\r\n\r\n\r\n// export class Buscador extends Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {\r\n//       title: \"\"\r\n//     };\r\n//   }\r\n//   handleChange(event) {\r\n//     this.setState({ title: event.target.value });\r\n//   }\r\n//   handleSubmit(event) {\r\n//     event.preventDefault();\r\n//     this.props.getMovies(this.state.title) //AGREGADO X MI\r\n//   }\r\n\r\n//   render() {\r\n//     const { title } = this.state;\r\n//     return (\r\n//       <div>\r\n//         <h2>Buscador</h2>\r\n//         <form className=\"form-container\" onSubmit={(e) => this.handleSubmit(e)}>\r\n//           <div>\r\n//             <label className=\"label\" htmlFor=\"title\">Película: </label>\r\n//             <input\r\n//               type=\"text\"\r\n//               id=\"title\"\r\n//               autoComplete=\"off\"\r\n//               value={title}\r\n//               onChange={(e) => this.handleChange(e)}\r\n//             />\r\n//           </div>\r\n//           <button type=\"submit\">BUSCAR</button>\r\n//         </form>\r\n//         <ul> \r\n//          {  //AGREGADO X MI\r\n//             //AGREGADO X MI\r\n//             //el primer this.props.movies verifica si hay movies en el input para no romper todo\r\n//            this.props.movies && this.props.movies.map(movie =>(\r\n//              //AGREGADO X MI EL KEY PARA QUE TENGAN UN KEY UNICO X EL ID\r\n//             <div key={movie.imdbID}>\r\n//                 <Link to={`/movie/${movie.imdbID}`}> \r\n//                   {movie.Title}     \r\n//                   </Link> \r\n//                 <button onClick={() => this.props.addMovieFavorite({Title: movie.Title, id: movie.imdbID})}>Fav</button> {/*COPY PASTE DEL README*/}\r\n//             </div>\r\n//               //AGREGADO X MI\r\n//               //AGREGADO X MI\r\n//            ))\r\n//          } \r\n//         </ul>\r\n//       </div>\r\n//     );\r\n//   } \r\n// }\r\n \r\n\r\n//COPY PASTE DEL README\r\n//COPY PASTE DEL README\r\n//COPY PASTE DEL README\r\n// function mapStateToProps(state) {\r\n//   return {\r\n//     movies: state.moviesLoaded\r\n//   };\r\n// }\r\n\r\n// function mapDispatchToProps(dispatch) {\r\n//   return {\r\n//     addMovieFavorite: movie => dispatch(addMovieFavorite(movie)),\r\n//     getMovies: title => dispatch(getMovies(title))\r\n//   };\r\n// }\r\n\r\n// export default connect(mapStateToProps,mapDispatchToProps)(Buscador);\r\n//COPY PASTE DEL README\r\n//COPY PASTE DEL README\r\n//COPY PASTE DEL README\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/logoHenry.57a1848e.png\";","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Logo from '../../logoHenry.png'\r\nimport Buscador from '../Buscador/Buscador'\r\n\r\nimport './Navbar.css';\r\n\r\nexport default function NavBar() {\r\n    return (\r\n        <header className=\"navbar\">                  \r\n          <div className=\"imagen\">  <img id=\"logoHenry\" src={Logo} width=\"80\" height=\"80\"  alt=\"\" /> <h2 className=\"movie-found\">Movie Found</h2>   </div>\r\n          \r\n            \r\n            \r\n          \r\n\r\n           <nav className=\"nav\">\r\n           \r\n            <NavLink  className=\"NavLink\"  to=\"/favs\" >Favoritas</NavLink>\r\n            <NavLink className=\"NavLink\" exact to=\"/\" >Home</NavLink>\r\n            \r\n            </nav>\r\n            \r\n           \r\n        </header>\r\n    )\r\n}","import { connect } from 'react-redux';\r\nimport { getMoviesDetail, GET_MOVIES_DETAIL } from '../../actions/index';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport React, { Component, useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport './Movie.css';\r\n\r\n\r\n\r\n\r\nexport default function Movie() {\r\n\r\n    const dispatch = useDispatch()\r\n    const movie = useSelector(state => state.movieDetail)\r\n    const params = useParams(); // DEFINIMOS USEPARAMS() PARA TRAERNOS LOS PARAMETROS DE LA API\r\n    \r\n    useEffect(() => {\r\n        const movieId = params.id;   // usamos params =====> useParams()\r\n        console.log(\"entre antes del dispatch\")\r\n       dispatch(getMoviesDetail(movieId))\r\n       console.log(\"entre despues del dispatch\")\r\n      },[])\r\n\r\n\r\n            return(\r\n                    <div className=\"movie-detail\">\r\n                    <h1> Detalle de la Pelicula <span className=\"span-title\">{movie.Title}</span></h1> \r\n\r\n                    <div>\r\n                    <figure>\r\n                    <img className=\"poster\"  src={ movie.Poster === \"N/A\" ?'https://thumbs.dreamstime.com/b/no-image-available-icon-flat-vector-no-image-available-icon-flat-vector-illustration-132482953.jpg':  movie.Poster }></img>\r\n                    </figure> \r\n                    </div>\r\n\r\n                    <h4>Año de lanzamieto: <span  className=\"span-info\">{movie.Released === \"N/A\" || \"\" ?  \" No se pudo obtener esa informacion.\" : movie.Released}</span></h4> \r\n                    <h4>Duracion: <span className=\"span-info\">{ movie.Runtime === \"N/A\" || \"\"   ?  \" No se pudo obtener esa informacion.\" : movie.Runtime}</span></h4> \r\n                    <h4>Genero: <span className=\"span-info\">{movie.Genre === \"N/A\" || \"\"    ?  \" No se pudo obtener esa informacion.\" : movie.Genre}</span></h4> \r\n                    <h4>Premios: <span className=\"span-info\">{movie.Awards === \"N/A\" || \"\"  ?  \" No se pudo obtener esa informacion.\" : movie.Awards}</span></h4>\r\n                    <h4>Producida por : <span className=\"span-info\">{movie.Production === \"N/A\" || \"\"  ?  \" No se pudo obtener esa informacion.\" : movie.Production}</span></h4> \r\n                    </div>\r\n             );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//COMENTADO ESTA CON CLASES\r\n//COMENTADO ESTA CON CLASES\r\n//COMENTADO ESTA CON CLASES\r\n//COMENTADO ESTA CON CLASES\r\n//COMENTADO ESTA CON CLASES\r\n\r\n\r\n\r\n\r\n\r\n// class Movie extends React.Component {\r\n\r\n\r\n// componentDidMount(){\r\n       \r\n//     const movieId = this.props.match.params.id;\r\n//     console.log(\"entre\")\r\n//     this.props.getMoviesDetail(movieId);\r\n// }\r\n//     render() {\r\n//         return (\r\n//             <div className=\"movie-detail\">\r\n                   \r\n//                 <h2> Detalle de la Pelicula {this.props.movie.Title}</h2>  \r\n//                 <h4>Año de lanzamieto:{this.props.movie.Released}</h4> \r\n//                 <h4>Duracion:{this.props.movie.Runtime}</h4> \r\n//                 <h4>Genero:{this.props.movie.Genre}</h4> \r\n//                 <h4>Premios:{this.props.movie.Awards}</h4>\r\n//                 <h4>Producida por :{this.props.movie.Production}</h4> \r\n                \r\n\r\n\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// function mapStateToProps(state) {\r\n//     return {\r\n//       movie: state.movieDetail\r\n//     };\r\n//   }\r\n  \r\n//   function mapDispatchToProps(dispatch) {\r\n//     return {\r\n//         getMoviesDetail: id => dispatch(getMoviesDetail(id)),\r\n//     };\r\n//   }\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps) (Movie);","import React from \"react\";\r\n\r\nimport Favorites from \"./components/Favorites/Favorites\";\r\nimport Buscador from \"./components/Buscador/Buscador\";\r\nimport NavBar from \"./components/NavBar/NavBar\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Movie from \"./components/Movie/Movie\";\r\n\r\nfunction App() {\r\n  return (\r\n      <React.Fragment>\r\n          <NavBar />\r\n          <Route exact path=\"/\" component={Buscador} />\r\n          <Route path=\"/favs\" component={Favorites} />\r\n          <Route path=\"/movie/:id\" component={Movie} />\r\n        \r\n      </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import  {ADD_MOVIE_FAVORITE, REMOVE_MOVIE_FAVORITE, GET_MOVIES_DETAIL, GET_MOVIES} from '../actions/index'\r\n\r\n//TODO HECHO X MI\r\n//TODO HECHO X MI\r\n//TODO HECHO X MI\r\n//TODO HECHO X MI\r\n\r\nconst initialState = {\r\n    moviesFavourites: [],\r\n    moviesLoaded: [],\r\n    movieDetail: {}\r\n  };\r\n\r\n\r\n  function rootReducer(state = initialState, action) {\r\n    if (action.type === ADD_MOVIE_FAVORITE) {\r\n        return {\r\n          ...state,\r\n          moviesFavourites: state.moviesFavourites.concat(action.payload)\r\n        }\r\n    }\r\n\r\n    if (action.type === REMOVE_MOVIE_FAVORITE) {\r\n        return {\r\n          ...state,\r\n          moviesFavourites: state.moviesFavourites.filter(movie => movie !== action.payload)\r\n        }\r\n    }\r\n\r\n    if (action.type === GET_MOVIES_DETAIL) {\r\n        return {\r\n          ...state,\r\n         movieDetail: action.payload\r\n        }\r\n    }\r\n\r\n\r\n    if (action.type === GET_MOVIES) {\r\n        return {\r\n          ...state,\r\n          moviesLoaded: action.payload.Search\r\n        };\r\n    }\r\n    return state;\r\n  }\r\n  \r\n  export default rootReducer;","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport rootReducer from \"../reducers/index\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(thunk)\r\n  );\r\n  \r\n  export default store;\r\n\r\n//COPY PASTE DEL README","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { BrowserRouter } from 'react-router-dom';   //HECHO X MI\r\nimport { Provider } from \"react-redux\";             //HECHO X MI\r\nimport store from \"./store/index\";                  //HECHO X MI\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>  \r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n    </Provider>,            //HECHO X MI EL PROVIDER\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}